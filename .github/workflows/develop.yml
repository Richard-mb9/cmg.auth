name: Deploy Python Lambda

on:
  push:
    branches:
      - develop
  pull_request:
    types:
      - closed
    branches:
      - develop

jobs:
  deploy:
    name: deploy-dev
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 12.x # used for installing the serverless-python-requirements dependency from NPM
      SECRETKEY: ${{ secrets.SECRETKEY }}
    strategy:
      matrix:
        python-version:
          - 3.6 # with a build matrix, you can specify a list of python versions to deploy with
    steps:
      # --------- use Python to install Python dependencies and run linter, tests, etc. ---------
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # --------- Use Node and NPM to install serverless-python-requirements ---------
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: npm install

      - name: Build docker for tests
        run: docker-compose -f ./tests/db/docker-compose-test.yml up -d -p 5432:5432

      - name: Run tests
        run: npm run tests

      - name: taking down docker for tests
        run: docker-compose -f ./tests/db/docker-compose-test.yml down

      - name: Run Redoc
        run: npm run redoc

      - name: Serverless Deploy
        uses: dhollerbach/github-action-serverless-with-python-requirements@master
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          host_db: ${{ secrets.HOST_DB_PRD }}
          password_db: ${{ secrets.PASSWORD_DB_PRD }}
          user_db: ${{ secrets.USER_DB_PRD }}
          database: ${{ secrets.DATABASE_PRD }}
          SECRETKEY: ${{ secrets.SECRETKEY }}
          ENVIRONMENT: dev
